/*
 * Copyright (c) Kuba SzczodrzyÅ„ski 2022-10-2.
 */

package io.github.cloudcutter.work.exploit.action

import io.github.cloudcutter.util.Text
import io.github.cloudcutter.work.exceptions.PingException
import kotlinx.coroutines.TimeoutCancellationException

class PingAction(
	id: String,
	title: Text,
	nextId: String?,
	val mode: Mode,
	val threshold: Int = when (mode) {
		Mode.FOUND -> 2
		Mode.LOST -> 3
	},
	timeout: Long = when (mode) {
		Mode.FOUND -> 10_000 + 3_000 * threshold.toLong()
		Mode.LOST -> 5_000 * threshold.toLong()
	},
) : Action(id, title, nextId, timeout) {

	enum class Mode {
		FOUND,
		LOST,
	}

	override fun getCloudcutterException(e: Exception) = when (e) {
		is TimeoutCancellationException -> when (mode) {
			Mode.FOUND -> PingException(PingException.Mode.EXPLOIT_TIMEOUT)
			Mode.LOST -> PingException(PingException.Mode.EXPLOIT_STILL_WORKING)
		}
		else -> super.getCloudcutterException(e)
	}
}
